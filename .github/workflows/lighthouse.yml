name: Lighthouse CI

on: [push]

jobs:
  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install packages
        run: |
          npm ci && npm install -g @lhci/cli

      - name: Build
        run: |
          npm run build

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          lhci autorun && lhci autorun --upload.target=temporary-public-storage || echo "Fail to Run Lighthouse CI!"

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |

            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync("./lhci_reports/manifest.json"));
            let comments = "";

            results.forEach((result,index) => {
                const { summary, jsonPath } = result;

                const details = JSON.parse(fs.readFileSync(jsonPath));

                const { audits } = details;
                const formatResult = (res) => Math.round(res * 100);

                Object.keys(summary).forEach(
                    (key) => (summary[key] = formatResult(summary[key]))
                );

                const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

                const comment = [
                    `‚ö°Ô∏è Lighthouse report ${index+1} ‚ö°Ô∏è`,
                    `| Category | Score |`,
                    `| --- | --- |`,
                    `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                    `| ${score(summary.accessibility)} Accessibility | ${summary.accessibility} |`,
                    `| ${score(summary['best-practices'])} Best practices | ${summary['best-practices']} |`,
                    `| ${score(summary.seo)} SEO | ${summary.seo} |`,
                    `| ${score(summary.pwa)} PWA | ${summary.pwa} |`,
                    `\n`,
                ].join("\n");

                const detail = [
                    `| Category | Score |`,
                    `| --- | --- |`,
                    `| ${score(
                        audits["first-contentful-paint"].score * 100
                    )} First Contentful Paint | ${
                        audits["first-contentful-paint"].displayValue
                    }|`,
                    `| ${score(
                        audits["time-to-interactive"].score * 100
                    )} Time to Interactive | ${
                        audits["time-to-interactive"].displayValue
                    }|`,
                    `| ${score(
                        audits["speed-index"].score * 100
                    )} SpeedIndex | ${
                        audits["speed-index"].displayValue
                    }|`,
                    `| ${score(
                        audits["total-blocking-time"].score * 100
                    )} Total Blocking Time | ${
                        audits["total-blocking-time"].displayValue
                    }|`,
                    `| ${score(
                        audits["llargest-contentful-paint"].score * 100
                    )} Largest Contentful Paint | ${
                        audits["largest-contentful-pait"].displayValue
                    }|`,
                    `| ${score(
                        audits["cumulative-layout-shift"].score * 100
                    )} Cumulative Layout Shift | ${
                        audits["cumulative-layout-shift"].displayValue
                    }|`,
                    `\n`,
                ].join("\n");

                comments += comment + "\n" + detail + "\n";
            });

            core.setOutput("comments", comments);

      - name: comment PR
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: '${{ steps.format_lighthouse_score.outputs.comments}}'
          check_for_duplicate_msg: false
